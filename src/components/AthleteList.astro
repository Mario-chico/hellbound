---
import type { HTMLAttributes } from "astro/types";
import type { Athletes } from "../types/Athletes";

interface Props {
  athletes: Athletes[];
  class?: string;
  selectedAthlete: Athletes;
  imgLoading?: HTMLAttributes<"img">["loading"]
}
const { athletes, class: className ="", selectedAthlete, imgLoading } = Astro.props;
---
<div class="athlete-small-container">
  {
    athletes.map(({ id, name, weight, category, gender }) => (
      <a 
        href={`/athletes/${id}`} 
        class:list={[
          "athlete-link",
          {
            active: selectedAthlete.id === id 
          },
        ]}
        data-id={id}
        data-name={name}
        data-weight={weight}
        data-category={category}
        data-gender={gender}
      >
        <div class="athlete-link-bg"/>
        <img 
          decoding="async" 
          src={`/athletes/${id}-big.webp`}
          alt="foto perrona" 
          class="athlete-image-small" 
          loading={imgLoading} 
          width="150" height="150"/>
      </a>
    ))
  }
  
</div>

<style>
  .athlete-small-container {
    display: grid;
    grid-template-columns: repeat(5, 1fr);
    grid-auto-rows: 160px;
    column-gap: 12px;
    row-gap: 2rem;
    margin-top: 12px;
  }
  .athlete-link{
    position: relative;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    transition: opacity 0.5s ease-in-out;
  }
  .athlete-link:hover {
    opacity: 0.9;
  }
  .athlete-link .athlete-image-small{
    z-index: 20;
    aspect-ratio: 1 / 1;
    object-fit: contain;
    transition: opacity 0.5s ease-in-out, filter 0.5s ease;
    mask-image: linear-gradient(to bottom, black 85%, transparent 100%);
    filter: grayscale();
  }
  .athlete-link:hover .athlete-image-small,
  .athlete-link.active .athlete-image-small {
    filter: grayscale(0%);
    transform: scale(1.1);
    transition: transform 0.5s ease-in-out, filter 0.5s ease-in-out;
  }
  .athlete-link-bg {
    opacity: 0.25;
    background: linear-gradient(180deg, rgba(255,255,255,1) 0%, rgba(255,255,255,0.5) 30%, rgba(0,0,0,0) 95%);
    transition: opacity 0.5s ease-in-out;
    width: 100%;
    height: 60%;
    display: block;
    position: absolute;
    bottom: 0;
  }
  .athlete-link.active .athlete-link-bg,
  .athlete-link:hover .athlete-link-bg {
    filter: brightness(0.5);
}
@media (max-width: 810px) and (min-width: 770px) {
  .athlete-small-container {
    grid-template-columns: repeat(4, 1fr);
  }
}
</style>