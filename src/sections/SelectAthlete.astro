---
import AthleteBigImage from "../components/AthleteBigImage.astro";
import AthleteList from "../components/AthleteList.astro";
import { ATHLETES } from "../const/athletes";
const listOfAthletes = ATHLETES.map((athlete) => {
  return {...athlete}
});
console.log('URL completa:', Astro.url.toString());
console.log("Todos los parámetros:", Object.fromEntries(Astro.url.searchParams));
console.log("Valor de athlete:", Astro.url.searchParams.get("athlete"));
const selectedAthleteId = Astro.url.searchParams.get("athlete");
console.log(selectedAthleteId)

const selectedAthlete = listOfAthletes.find(({id}) => id === selectedAthleteId) || listOfAthletes[0];
---

<section>
  <h2>Selecciona un atleta</h2>
  <div class="athletes-container">
    <article>
      <AthleteBigImage 
        id={selectedAthlete.id}
        name={selectedAthlete.name}
        loading={selectedAthleteId ? "eager" : "lazy"}
        />
    </article>
    <div class="athletes-div">
      <nav class="athletes-nav">
        <AthleteList 
          athletes={listOfAthletes}
          selectedAthlete={selectedAthlete}
          imgLoading={!selectedAthleteId ? "lazy" : undefined}
        />
      </nav>
    </div>

    <div class="horizontal-scroll-athletes">
      <div class="carousel">
        <div class="carousel-inner">
          {
            listOfAthletes.map((athlete, index) => (
              <div class:list={`carousel-item ${index === 0 ? "carousel-item-index" : "" }`}>
                <AthleteList
                  athletes={[athlete]}
                  selectedAthlete={selectedAthlete}
                />
              </div>
            ))
          }
        </div>
      </div>
    </div>

  </div>
</section>

<script >
  import {$, $$} from "@/lib/dom-selector"

  document.addEventListener("astro:page-load", () => {
    
    const athleteLinks = $$(".athlete-link") as globalThis.NodeListOf<HTMLAnchorElement>;
    const athletesNav = $(".athletes-div");
    const athleteImage =$(".athlete-picture") as HTMLPictureElement;
    const athleteTitle = $(".athlete-title") as HTMLSpanElement;
    if (!athletesNav) return


    const updatedSelectedAthleteId = localStorage.getItem("selected:athlete") || new URLSearchParams(window.location.search).get("athlete") || "mario"

      const updatedSelectedAthleteElement: HTMLElement | null = $(
			`.athlete-link[data-id=${updatedSelectedAthleteId}]`
		)
		if (updatedSelectedAthleteElement) {
      console.log('sientro ' + updatedSelectedAthleteElement)
			activateAthlete(updatedSelectedAthleteElement, updatedSelectedAthleteElement, athletesNav, true)
		}
    // detect with intersection observer that the $boxerNav is in viewport
		const athleteNavObserver = new IntersectionObserver(
			(entries) => {
				entries.forEach((entry) => {
					if (entry.isIntersecting) {
						// disconnect observer to do this only once
						athleteNavObserver.disconnect()
						// get all images and preload them
						athleteLinks.forEach((link) => {
							const { id } = link.dataset
							const athleteSrc = `https://res.cloudinary.com/dliqpogct/image/upload/f_auto,q_auto/v1/hellbound/${id}-big`
							// create link preload for each image for webp
							const preloadLink = document.createElement("link")
							preloadLink.rel = "preload"
							preloadLink.as = "image"
							preloadLink.href = `${athleteSrc}.webp`
							preloadLink.type = "image/webp"
							document.head.appendChild(preloadLink)
						})
					}
				})
			},
			{
				root: null,
				threshold: 0.1,
			}
		)
		athleteNavObserver.observe(athletesNav)

    function activateAthlete(
			element: HTMLElement,
			link: HTMLElement,
			nav: HTMLElement,
			replaceUrl: boolean = false,
		) {
			if (element?.classList.contains("active")) return

			const { id, name, } = element?.dataset

			if (!id || !name ) return

			const splitName = name.split(" ")
			const lastName = splitName[splitName.length - 1]
			const firstName = splitName.slice(0, splitName.length - 1).join(" ")
			const spanNames = `
        <a href="/athletes/${id}" class="athlete-link">
          <span>${firstName?.toLocaleLowerCase()}</span> 
          <span>${lastName?.toLocaleLowerCase()}</span>
        </a>
        `;
			nav?.querySelector(".active")?.classList.remove("active")

			link.classList.add("active")

			if (replaceUrl) {
				history.replaceState({}, "", `?athlete=${id}`)
			}
			const athleteSrc = `https://res.cloudinary.com/dliqpogct/image/upload/f_auto,q_auto/v1/hellbound/${id}-big`

			athleteImage.getElementsByTagName("img")[0].src = `${athleteSrc}.webp`
			athleteTitle.innerHTML = spanNames
			athleteImage.getElementsByTagName("img")[0].alt = `Fotografía de ${name}`

		}

    athleteLinks.forEach((link) => {
			link.addEventListener("click", (event: MouseEvent) => {
				const currentTarget = event.currentTarget as HTMLElement
				const athleteId = currentTarget.getAttribute("data-id")
				if (athleteId) localStorage.setItem("selected:athlete", JSON.stringify(athleteId))
				activateAthlete(currentTarget, currentTarget, athletesNav, true)
			})
		})

    athleteLinks.forEach((link) => {
			link.addEventListener("mouseenter", (event) => {
				const currentTarget = event.currentTarget as HTMLElement
				if (currentTarget.classList.contains("active")) return
				activateAthlete(currentTarget, link, athletesNav, true)
			})
		})
    
    const carouselInner = $(".carousel-inner") as HTMLElement
  
      // detect match media change for mobile
      const mobileMediaQuery = window.matchMedia("(max-width: 769px)")
  
      function highlighAthlete(link: HTMLAnchorElement) {
        const rect = link.getBoundingClientRect()
        const { width } = carouselInner.getBoundingClientRect()
        const m = rect.left > width / 2 - rect.width * 0.75 && rect.left < width / 2 + rect.width * 0.25;
        if (rect.left > width / 2 - rect.width * 0.75 && rect.left < width / 2 + rect.width * 0.25) {
          console.log(m + ' que pues')
          activateAthlete(link, link, carouselInner, false)
        }
      }
  
      function highlightActiveAthlete() {
        athleteLinks.forEach((link) => {
          highlighAthlete(link)
        })
      }
  
      function updateActiveThumbnailPosition() {
        // const athlete = new URLSearchParams(window.location.search).get("athlete")
        const athlete = new URLSearchParams(window.location.search).get("athlete")
        const athleteActiveElement = $(`.carousel .athlete-link[data-id=${athlete}]`)
        if (athleteActiveElement) {
          const carouselWidth = carouselInner.clientWidth
          console.log(carouselWidth + 'w')
          const thumbnailWidth = athleteActiveElement.offsetWidth
          console.log(thumbnailWidth + 't')
          const currentPosition = athleteActiveElement.offsetLeft - (carouselWidth - thumbnailWidth) / 2
          console.log(currentPosition + 'c')
  
          carouselInner.scrollTo(currentPosition, 0)
        }
      }
  
      if (mobileMediaQuery.matches) {
        updateActiveThumbnailPosition()
  
        carouselInner.addEventListener("scroll", () => {
          highlightActiveAthlete()
        })
      }
  });

</script>
<style>
  section{
  	transform: translate3d(0,0,0)rotate(0)skewX(0)skewY(0)scaleX(1)scaleY(1);
  }
  .athletes-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 24px;
    margin-top: 24px;
  } 
  article {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 2rem;
    position: relative;
  }
  .horizontal-scroll-athletes {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    margin-top: -80px;
  }
  .carousel{
    margin-top: 2rem;
    width: 100%;
    max-width: 100vw;
    overflow-y: hidden;
    overflow-x: scroll;
  }
  .carousel-inner{
    display: flex;
    scroll-snap-type: x mandatory;
    overflow-y: hidden;
    overflow-x: scroll;
    padding-right: 40%
  }
  .carousel-item{
    width: 70%;
    flex-shrink: 0;
    scroll-snap-align: center;
    padding-inline: 0.5rem;
  }
  .carousel-item-index{
    margin-left: 65%;
  }
  .athletes-div {
    display: none;
  }
  .athletes-list{
    position: relative;
  }
  @media (max-width: 768px) {
		.carousel {
			scrollbar-width: none;
		}

		.carousel::-webkit-scrollbar {
			display: none;
		}

		.carousel-inner {
			transition: transform 0.3s ease-in-out;
			scrollbar-width: none;
		}

		.carousel-inner::-webkit-scrollbar {
			display: none;
		}

		.carousel-item {
			transition: opacity 0.3s ease-in-out;
		}

		.carousel-item.active {
			opacity: 1;
			scale: 1.2;
		}
	}
  @media screen and (min-width: 769px) {
    section{
      margin-top: 5rem;
      margin-bottom: 5rem;
    }
    .athletes-div {
      position: relative;
      width: 100%;
      height: 30dvh;
      display: flex;
    }
    .athletes-nav {
      width: 100%;
    }
    .horizontal-scroll-athletes {
      display: none;
    }
  }
</style>